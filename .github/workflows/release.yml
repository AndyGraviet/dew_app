name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read
  pages: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macos
            arch: universal
            build-args: --release
            artifact-name: dew_app-macos-universal
            artifact-path: build/macos/Build/Products/Release/
          - os: windows-latest
            platform: windows
            arch: x64
            build-args: --release
            artifact-name: dew_app-windows-x64
            artifact-path: build/windows/x64/runner/Release/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.6'
          channel: 'stable'
          cache: true

      - name: Set up Java (for Android, if needed)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'


      - name: Enable platform
        run: flutter config --enable-${{ matrix.platform }}-desktop

      - name: Generate app config from secrets
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          GOOGLE_WEB_CLIENT_ID: ${{ secrets.GOOGLE_WEB_CLIENT_ID }}
          GOOGLE_IOS_CLIENT_ID: ${{ secrets.GOOGLE_IOS_CLIENT_ID }}
        run: dart scripts/generate_app_config.dart

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze --no-fatal-infos --no-fatal-warnings

      - name: Run tests
        run: flutter test

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update pubspec.yaml version
        shell: bash
        run: |
          VERSION_NUMBER=${{ steps.get_version.outputs.version_number }}
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            sed -i "s/^version: .*/version: ${VERSION_NUMBER}+${GITHUB_RUN_NUMBER}/" pubspec.yaml
          else
            sed -i.bak "s/^version: .*/version: ${VERSION_NUMBER}+${GITHUB_RUN_NUMBER}/" pubspec.yaml
            rm -f pubspec.yaml.bak
          fi

      - name: Import Apple Developer certificates (macOS only)
        if: matrix.platform == 'macos'
        env:
          APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate
          echo "$APPLE_CERT_DATA" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build Flutter app
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "macos" ]; then
            flutter build macos ${{ matrix.build-args }}
          else
            flutter build ${{ matrix.platform }} ${{ matrix.build-args }}
          fi

      - name: Sign macOS app
        if: matrix.platform == 'macos'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          APP_PATH="${{ matrix.artifact-path }}dew_app.app"
          codesign --force --options runtime --deep --sign "$APPLE_SIGNING_IDENTITY" "$APP_PATH"
          codesign --verify --verbose "$APP_PATH"

      - name: Create macOS DMG
        if: matrix.platform == 'macos'
        run: |
          APP_PATH="${{ matrix.artifact-path }}dew_app.app"
          DMG_PATH="${{ matrix.artifact-path }}dew_app-${{ matrix.arch }}.dmg"
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg-temp
          cp -R "$APP_PATH" dmg-temp/
          
          # Create DMG
          hdiutil create -volname "Dew" -srcfolder dmg-temp -ov -format UDZO "$DMG_PATH"
          
          # Clean up
          rm -rf dmg-temp

      - name: Sign macOS DMG
        if: matrix.platform == 'macos'
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          DMG_PATH="${{ matrix.artifact-path }}dew_app-${{ matrix.arch }}.dmg"
          codesign --force --sign "$APPLE_SIGNING_IDENTITY" "$DMG_PATH"

      - name: Notarize macOS DMG
        if: matrix.platform == 'macos'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          DMG_PATH="${{ matrix.artifact-path }}dew_app-${{ matrix.arch }}.dmg"
          
          # Submit for notarization
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the notarization
          xcrun stapler staple "$DMG_PATH"

      - name: Create Windows installer
        if: matrix.platform == 'windows'
        shell: bash
        run: |
          # Create a simple zip for now - you can enhance this with NSIS or WiX later
          mkdir -p windows-release
          cp -r ${{ matrix.artifact-path }}* windows-release/
          cd windows-release
          7z a ../dew_app-windows-x64.zip *
          cd ..
          ls -la dew_app-windows-x64.zip


      - name: Setup Python for signing (macOS only)
        if: matrix.platform == 'macos'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install signing dependencies (macOS only)
        if: matrix.platform == 'macos'
        run: |
          echo "üì• Installing cryptography for Ed25519 signing..."
          pip install cryptography
          
          # Use our Python signing script
          mkdir -p sparkle_tools
          cp scripts/sign_update.py sparkle_tools/sign_update
          chmod +x sparkle_tools/sign_update
          
          echo "‚úÖ Signing tools ready"
          ls -la sparkle_tools/

      - name: Generate Sparkle signature (macOS only)
        if: matrix.platform == 'macos'
        env:
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        run: |
          DMG_PATH="${{ matrix.artifact-path }}dew_app-${{ matrix.arch }}.dmg"
          
          # Write the private key with proper formatting
          # Convert any potential single-line format to proper PEM
          echo "$SPARKLE_PRIVATE_KEY" | tr ' ' '\n' > sparkle_private_key.pem
          
          # If that didn't work, try treating it as base64 encoded
          if ! grep -q "BEGIN PRIVATE KEY" sparkle_private_key.pem; then
            echo "üîÑ Trying base64 decode..."
            echo "$SPARKLE_PRIVATE_KEY" | base64 -d > sparkle_private_key.pem 2>/dev/null || {
              echo "üîÑ Trying literal interpretation..."
              printf '%s\n' "$SPARKLE_PRIVATE_KEY" > sparkle_private_key.pem
            }
          fi
          
          # Last resort: reconstruct the key format
          if ! grep -q "BEGIN PRIVATE KEY" sparkle_private_key.pem; then
            echo "üîÑ Reconstructing PEM format..."
            {
              echo "-----BEGIN PRIVATE KEY-----"
              echo "$SPARKLE_PRIVATE_KEY" | tr -d '\n' | fold -w 64
              echo "-----END PRIVATE KEY-----"
            } > sparkle_private_key.pem
          fi
          
          # Debug (without showing content)
          echo "üîç Key file lines: $(wc -l < sparkle_private_key.pem)"
          echo "üîç Key file size: $(wc -c < sparkle_private_key.pem) bytes"
          echo "üîç Has BEGIN: $(grep -c 'BEGIN PRIVATE KEY' sparkle_private_key.pem || echo 0)"
          echo "üîç Has END: $(grep -c 'END PRIVATE KEY' sparkle_private_key.pem || echo 0)"
          
          # Use our Python sign_update tool for Ed25519 signature
          echo "üîè Generating Ed25519 signature for $DMG_PATH"
          SIGNATURE=$(python3 ./sparkle_tools/sign_update "$DMG_PATH" -f sparkle_private_key.pem)
          
          # Debug: Check if signature was generated
          if [ -z "$SIGNATURE" ]; then
            echo "‚ùå ERROR: Signature generation failed or returned empty"
            python3 ./sparkle_tools/sign_update "$DMG_PATH" -f sparkle_private_key.pem || true
            exit 1
          fi
          
          echo "‚úÖ Signature generated: $SIGNATURE"
          echo "SPARKLE_SIGNATURE_${{ matrix.arch }}=$SIGNATURE" >> $GITHUB_ENV
          
          # Also save file size for appcast
          FILE_SIZE=$(stat -f%z "$DMG_PATH")
          echo "DMG_SIZE_${{ matrix.arch }}=$FILE_SIZE" >> $GITHUB_ENV
          
          # Clean up
          rm -f sparkle_private_key.pem

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            ${{ matrix.platform == 'macos' && format('{0}*.dmg', matrix.artifact-path) || '' }}
            ${{ matrix.platform == 'windows' && 'dew_app-windows-x64.zip' || '' }}
            
      - name: Save build metadata (macOS only)
        if: matrix.platform == 'macos'
        run: |
          # Get environment variables
          SIGNATURE_VAR="SPARKLE_SIGNATURE_${{ matrix.arch }}"
          SIZE_VAR="DMG_SIZE_${{ matrix.arch }}"
          
          # Save metadata for appcast generation
          cat > build_metadata_${{ matrix.arch }}.json << EOF
          {
            "arch": "${{ matrix.arch }}",
            "signature": "${!SIGNATURE_VAR}",
            "size": "${!SIZE_VAR}",
            "filename": "dew_app-${{ matrix.arch }}.dmg"
          }
          EOF
          
          # Debug: Show the metadata
          echo "üìã Build metadata for ${{ matrix.arch }}:"
          cat build_metadata_${{ matrix.arch }}.json
          
      - name: Upload build metadata
        if: matrix.platform == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.arch }}
          path: build_metadata_${{ matrix.arch }}.json

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifacts
        run: |
          echo "=== Artifacts directory structure ==="
          find artifacts -type f -name "*.dmg" -o -name "*.zip" | sort
          echo "=== Full directory listing ==="
          ls -la artifacts/
          for dir in artifacts/*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Dew ${{ steps.get_version.outputs.version }}
          body: |
            ## What's New in ${{ steps.get_version.outputs.version }}

            ### Features
            - Auto-update functionality
            - Cross-platform support
            - Enhanced productivity features

            ### Installation
            - **macOS**: Download the Universal DMG file (supports both Intel and Apple Silicon)
            - **Windows**: Download and extract the ZIP file

            ### System Requirements
            - **macOS**: macOS 10.15 or later
            - **Windows**: Windows 10 or later

            ---
            
            Built with Flutter ‚Ä¢ Auto-updates enabled
          draft: false
          prerelease: false

      - name: Upload macOS Universal Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dew_app-macos-universal/dew_app-universal.dmg
          asset_name: dew_app-macos-universal.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dew_app-windows-x64/dew_app-windows-x64.zip
          asset_name: dew_app-windows-x64.zip
          asset_content_type: application/zip

      - name: Generate appcast.xml
        run: |
          # Get release information
          VERSION="${{ steps.get_version.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          RELEASE_DATE=$(date -u +"%a, %d %b %Y %H:%M:%S %z")
          
          # Download metadata
          cat artifacts/metadata-universal/build_metadata_universal.json
          
          # Extract metadata
          UNIVERSAL_SIGNATURE=$(jq -r '.signature' artifacts/metadata-universal/build_metadata_universal.json)
          UNIVERSAL_SIZE=$(jq -r '.size' artifacts/metadata-universal/build_metadata_universal.json)
          
          # Create appcast.xml
          cat > appcast.xml << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
              <channel>
                  <title>Dew App</title>
                  <description>Productivity Reimagined - Updates for Dew App</description>
                  <language>en</language>
                  <link>https://AndyGraviet.github.io/dew_app</link>
                  <item>
                      <title>Dew ${VERSION}</title>
                      <description><![CDATA[
                          <h3>What's New in ${VERSION}</h3>
                          <ul>
                              <li>Auto-update functionality</li>
                              <li>Cross-platform support</li>
                              <li>Enhanced productivity features</li>
                          </ul>
                          
                          <p><strong>System Requirements:</strong></p>
                          <ul>
                              <li>macOS: macOS 10.15 or later</li>
                              <li>Windows: Windows 10 or later</li>
                          </ul>
                          
                          <p><em>This update includes the latest features and improvements. The app will update automatically.</em></p>
                      ]]></description>
                      <pubDate>${RELEASE_DATE}</pubDate>
                      <sparkle:version>${VERSION_NUMBER}</sparkle:version>
                      <sparkle:shortVersionString>${VERSION_NUMBER}</sparkle:shortVersionString>
                      
                      <!-- macOS Universal DMG -->
                      <enclosure
                          url="https://github.com/${{ github.repository }}/releases/download/${VERSION}/dew_app-macos-universal.dmg"
                          length="${UNIVERSAL_SIZE}"
                          type="application/x-apple-diskimage"
                          sparkle:os="macos"
                          sparkle:installerArguments="/Applications"
                          sparkle:edSignature="${UNIVERSAL_SIGNATURE}" />
                  </item>
              </channel>
          </rss>
          EOF
          
          echo "‚úÖ Generated appcast.xml"
          cat appcast.xml

      - name: Update GitHub Pages with appcast.xml
        run: |
          # Save the generated appcast.xml
          cp appcast.xml /tmp/generated_appcast.xml
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Fetch and checkout main branch
          git fetch origin main
          git checkout -B main origin/main
          
          # Copy the generated appcast.xml to docs folder
          cp /tmp/generated_appcast.xml docs/appcast.xml
          
          # Commit and push to main branch
          git add docs/appcast.xml
          git commit -m "Update appcast.xml for version ${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          git push origin main